/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/avatar.glb -o src/components/Avatars.tsx -r public -t -k 
*/

import * as THREE from 'three';
import React, { JSX, useEffect, useRef, useState } from 'react';
import { useGraph } from '@react-three/fiber';
import { useGLTF, useAnimations } from '@react-three/drei';
import { GLTF, SkeletonUtils } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Wolf3D_Hair: THREE.SkinnedMesh;
    Wolf3D_Glasses: THREE.SkinnedMesh;
    Wolf3D_Outfit_Top: THREE.SkinnedMesh;
    Wolf3D_Outfit_Bottom: THREE.SkinnedMesh;
    Wolf3D_Outfit_Footwear: THREE.SkinnedMesh;
    Wolf3D_Body: THREE.SkinnedMesh;
    EyeLeft: THREE.SkinnedMesh;
    EyeRight: THREE.SkinnedMesh;
    Wolf3D_Head: THREE.SkinnedMesh;
    Wolf3D_Teeth: THREE.SkinnedMesh;
    Hips: THREE.Bone;
  };
  materials: {
    Wolf3D_Hair: THREE.MeshStandardMaterial;
    Wolf3D_Glasses: THREE.MeshStandardMaterial;
    Wolf3D_Outfit_Top: THREE.MeshStandardMaterial;
    Wolf3D_Outfit_Bottom: THREE.MeshStandardMaterial;
    Wolf3D_Outfit_Footwear: THREE.MeshStandardMaterial;
    Wolf3D_Body: THREE.MeshStandardMaterial;
    Wolf3D_Eye: THREE.MeshStandardMaterial;
    Wolf3D_Skin: THREE.MeshStandardMaterial;
    Wolf3D_Teeth: THREE.MeshStandardMaterial;
  };
  animations: THREE.AnimationAction[];
};

type AvatarProps = JSX.IntrinsicElements['group'] & {
  onHover?: (hovered: boolean) => void;
};

export function Avatar({ onHover, ...props }: AvatarProps) {
  const { scene } = useGLTF('/models/avatar.glb');
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as unknown as GLTFResult;

  // Optimize materials for performance
  React.useMemo(() => {
    Object.values(materials).forEach((material) => {
      if (material instanceof THREE.MeshStandardMaterial) {
        material.precision = 'mediump';
        // Disable expensive features for better performance
        material.envMapIntensity = 0.5;
      }
    });
  }, [materials]);

  // Load animations
  const animationGLTF = useGLTF('/animations/animations.glb');
  const { animations } = animationGLTF as { animations: THREE.AnimationClip[] };

  const group = useRef<THREE.Group>(null);
  const { actions } = useAnimations(animations, group);

  // Find the idle animation safely
  const idleAnimation = animations?.find(
    (animation: THREE.AnimationClip) => animation.name === 'floating'
  );

  const [animation] = useState<string>(idleAnimation?.name || 'floating');
  const [isAnimationReady, setIsAnimationReady] = useState(false);

  // Start animation immediately when available
  useEffect(() => {
    if (actions && actions[animation] && !isAnimationReady) {
      // Start animation immediately without fade-in delay
      const action = actions[animation];
      if (action) {
        action.reset();
        action.setEffectiveTimeScale(1);
        action.setEffectiveWeight(1);
        action.enabled = true;
        action.play();
        setIsAnimationReady(true);
      }
    }
  }, [actions, animation, isAnimationReady]);

  // Ensure animation continues playing
  useEffect(() => {
    if (actions && actions[animation] && isAnimationReady) {
      const action = actions[animation];
      if (action && !action.isRunning()) {
        action.play();
      }
    }
  });

  // Hover handlers
  const handlePointerEnter = () => {
    onHover?.(true);
    document.body.style.cursor = 'grabbing';
  };

  const handlePointerLeave = () => {
    onHover?.(false);
    document.body.style.cursor = 'default';
  };

  return (
    <group
      {...props}
      dispose={null}
      ref={group}
      onPointerEnter={handlePointerEnter}
      onPointerLeave={handlePointerLeave}
      // Hide avatar until animation is ready to prevent T-pose flash
      visible={isAnimationReady}
    >
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name='Wolf3D_Hair'
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name='Wolf3D_Glasses'
        geometry={nodes.Wolf3D_Glasses.geometry}
        material={materials.Wolf3D_Glasses}
        skeleton={nodes.Wolf3D_Glasses.skeleton}
      />
      <skinnedMesh
        name='Wolf3D_Outfit_Top'
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name='Wolf3D_Outfit_Bottom'
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        name='Wolf3D_Outfit_Footwear'
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        name='Wolf3D_Body'
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        name='EyeLeft'
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name='EyeRight'
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name='Wolf3D_Head'
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name='Wolf3D_Teeth'
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload('/models/avatar.glb');
useGLTF.preload('/animations/animations.glb');
